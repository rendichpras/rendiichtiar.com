generator client {
  provider   = "prisma-client-js"
  engineType = "client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  guestbook     Guestbook[]

  mentionedIn   Guestbook[] @relation("MentionedIn")
  mentionedBy   Guestbook[] @relation("Mentions")
  likes         Like[]

  posts                 Post[]
  postComments          PostComment[]
  postCommentsMentioned PostComment[] @relation("PostCommentMentioned")
}

model Guestbook {
  id        String   @id @default(cuid())
  message   String   @db.Text
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  parentId  String?
  parent    Guestbook?   @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Guestbook[]  @relation("Replies")

  rootId    String?
  root      Guestbook?   @relation("RootThread", fields: [rootId], references: [id], onDelete: Cascade)
  thread    Guestbook[]  @relation("RootThread")

  mentionedUserId String?
  mentionedUser   User?      @relation("MentionedIn", fields: [mentionedUserId], references: [id])
  mentions        User[]     @relation("Mentions")

  likes     Like[]

  @@index([parentId])
  @@index([rootId])
}

model Like {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  userId      String
  guestbookId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestbook   Guestbook @relation(fields: [guestbookId], references: [id], onDelete: Cascade)

  @@unique([userId, guestbookId])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now())
  status    String   @default("UNREAD")
}

model Post {
  id           String      @id @default(cuid())
  slug         String      @unique
  title        String
  subtitle     String?
  excerpt      String      @db.Text
  content      String      @db.Text
  coverUrl     String?
  status       PostStatus  @default(DRAFT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  publishedAt  DateTime?
  readingTime  Int         @default(0)
  views        Int         @default(0)

  authorId     String
  author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade)

  tags         PostTag[]
  comments     PostComment[]

  @@index([status, publishedAt])
}

model Tag {
  id    String   @id @default(cuid())
  name  String   @unique
  slug  String   @unique
  posts PostTag[]
}

model PostTag {
  postId String
  tagId  String
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model PostComment {
  id              String   @id @default(cuid())
  postId          String
  userId          String
  message         String   @db.Text
  createdAt       DateTime @default(now())

  parentId        String?
  rootId          String?

  mentionedUserId String?
  mentionedUser   User?    @relation("PostCommentMentioned", fields: [mentionedUserId], references: [id])

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  parent  PostComment?  @relation("PostCommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies PostComment[] @relation("PostCommentReplies")

  @@index([postId])
  @@index([rootId])
  @@index([parentId])
}