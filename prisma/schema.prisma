// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  guestbook     Guestbook[]
  
  // Field untuk mention
  mentionedIn   Guestbook[] @relation("MentionedIn")
  mentionedBy   Guestbook[] @relation("Mentions")

  // Field untuk like
  likes         Like[]
}

model Guestbook {
  id        String   @id @default(cuid())
  message   String   @db.Text
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Fields untuk reply
  parentId  String?  // ID dari pesan yang di-reply
  parent    Guestbook?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Guestbook[] @relation("Replies")
  
  // Field untuk mention
  mentionedUserId String? // ID user yang di-mention
  mentionedUser   User?   @relation("MentionedIn", fields: [mentionedUserId], references: [id])
  mentions        User[]  @relation("Mentions")

  // Field untuk like
  likes     Like[]
}

model Like {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  userId      String
  guestbookId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestbook   Guestbook @relation(fields: [guestbookId], references: [id], onDelete: Cascade)

  @@unique([userId, guestbookId])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now())
  status    String   @default("UNREAD") // UNREAD, READ, REPLIED
}
